#include "nSystem.h"
#include "nSysimp.h"

// Su solucion debe ir en nReservar.c.  No necesita modificar ningun
// otro archivo de nSystem.

// Estas funciones son dadas:

// marcar: asigna val a los elementos del arreglo a con indices de e
// hasta e+k-1, es decir a[e], a[e+1], ... a[e+k-1].
static void marcar(int *a, int e, int k, int val);

// buscar: encuentra k elementos consecutivos en 0 en el arreglo a de tamanno n.
// Retorna un valor e, tal que a[e]==0, a[e+1]==0, ..., a[e+k-1]==0.
// Retorna -1 si la busqueda fracasa.
static int buscar(int *a, int n, int k);

// ==== Aca empieza su solucion ======================

// Ya se incluye una llamada a InitReservar en nProcess.c.
void InitReservar() {
  ... inicialice aca sus variables globales ...
}

// Ya se encuentra definido el estado WAIT_RESERVAR, Â¡uselo!
// Ademas en el descriptor de tarea se anadieron los campos e y k que
// le serviran para recordar el numero de estacionamientos solicitados y
// el estacionamiento otorgado.
int nReservar(int k) {
  ... implemente nReservar ...
}

void nLiberar(int e, int k) {
  ... Implemente nLiberar ...
  ... Para la cola de tareas en espera use el tipo Queue ...
  ... Sus operaciones estan definidas en nsrc/nQueue.h ...
  ... Use la funcion PeekTask para obtener la tarea que esta
      en primer lugar en una cola, sin extraerla ...
} 

// Funciones dadas

static void marcar(int *a, int e, int k, int val) {
  for (int i= e; i<e+k; i++)
    a[i]= val;
}

static int buscar(int *a, int n, int k) {
  int e= 0, i= 0, libres= 0;
  
  while(i<N_EST) {
    if (a[i]) {
      e= ++i;
      libres= 0;
    }
    else {
      libres++;
      if (libres>=k) {
        return e;
      }
      i++;
    }
  }
  return -1;
}

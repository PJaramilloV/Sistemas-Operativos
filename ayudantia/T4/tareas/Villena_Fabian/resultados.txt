Sistema operativo utilizado
Linux c 5.10.0-16-amd64 #1 SMP Debian 5.10.127-2 (2022-07-23) x86_64 GNU/Linux
==== run-san =============================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -c -fsanitize=address -fsanitize=undefined -DSANITIZE -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth-san.a
ar r libnth-san.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth-san.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -fsanitize=address -fsanitize=undefined -DSAN -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth-san.a -lm -lpthread -lrt -o test-compartir.nbin-san
Ejecute con: test-compartir.nbin-san ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin-san
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    1: T4 solicita acceder
 1002: lanzando T3
 1003: T3 solicita acceder
 3024: lanzando T1
 3024: T1 solicita compartir p
 3024: T4 accede a p
 3024: T3 accede a p
 4025: lanzando T2
 4025: T2 solicita acceder
 4025: T2 accede a p
 5060: T4 devuelve
 6042: T2 devuelve
 7028: T3 devuelve
 7028: T1 termina de compartir p
 9044: T1 solicita compartir q
11042: T2 solicita acceder
11042: T2 accede a q
12043: T2 devuelve
12043: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 9 segundos
Se hicieron 30101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 60529
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin-san -slice 1
Info: setting 1-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1001: lanzando T3
 1001: T3 solicita acceder
 3001: lanzando T1
 3002: T1 solicita compartir p
 3002: T3 accede a p
 3002: T4 accede a p
 4003: lanzando T2
 4003: T2 solicita acceder
 4003: T2 accede a p
 5021: T4 devuelve
 6007: T2 devuelve
 7015: T3 devuelve
 7015: T1 termina de compartir p
 9016: T1 solicita compartir q
11027: T2 solicita acceder
11027: T2 accede a q
12042: T2 devuelve
12042: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 9 segundos
Se hicieron 2985 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 7619
Info: Implicit context changes = 1215
==== run-g ===============================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -c -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth-g.a
ar r libnth-g.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth-g.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth-g.a -lm -lpthread -lrt -o test-compartir.nbin-g
Ejecute con: test-compartir.nbin-g ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin-g
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1000: lanzando T3
 1000: T3 solicita acceder
 3001: lanzando T1
 3001: T1 solicita compartir p
 3001: T4 accede a p
 3001: T3 accede a p
 4003: lanzando T2
 4003: T2 solicita acceder
 4003: T2 accede a p
 5001: T4 devuelve
 6003: T2 devuelve
 7012: T3 devuelve
 7013: T1 termina de compartir p
 9014: T1 solicita compartir q
11004: T2 solicita acceder
11004: T2 accede a q
12025: T2 devuelve
12025: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 9 segundos
Se hicieron 30101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 60529
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin-g -ncores 4
Info: setting 4-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1000: lanzando T3
 1000: T3 solicita acceder
 3002: lanzando T1
 3002: T1 solicita compartir p
 3002: T4 accede a p
 3002: T3 accede a p
 4002: lanzando T2
 4002: T2 solicita acceder
 4002: T2 accede a p
 5015: T4 devuelve
 6026: T2 devuelve
 7003: T3 devuelve
 7004: T1 termina de compartir p
 9004: T1 solicita compartir q
11026: T2 solicita acceder
11026: T2 accede a q
12029: T2 devuelve
12029: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 4 segundos
Se hicieron 9628 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 4
Info: total context changes = 8009
Info: Implicit context changes = 0
==== run =================================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -O -c -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth.a
ar r libnth.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -O -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth.a -lm -lpthread -lrt -o test-compartir.nbin
Ejecute con: test-compartir.nbin ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1000: lanzando T3
 1000: T3 solicita acceder
 3027: lanzando T1
 3027: T1 solicita compartir p
 3027: T4 accede a p
 3027: T3 accede a p
 4029: lanzando T2
 4029: T2 solicita acceder
 4029: T2 accede a p
 5027: T4 devuelve
 6039: T2 devuelve
 7052: T3 devuelve
 7052: T1 termina de compartir p
 9061: T1 solicita compartir q
11039: T2 solicita acceder
11040: T2 accede a q
12041: T2 devuelve
12041: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 8 segundos
Se hicieron 30101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 60529
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin -ncores 4
Info: setting 4-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1013: lanzando T3
 1013: T3 solicita acceder
 3013: lanzando T1
 3013: T1 solicita compartir p
 3013: T4 accede a p
 3013: T3 accede a p
 4013: lanzando T2
 4013: T2 solicita acceder
 4013: T2 accede a p
 5014: T4 devuelve
 6014: T2 devuelve
 7013: T3 devuelve
 7014: T1 termina de compartir p
 9014: T1 solicita compartir q
11023: T2 solicita acceder
11023: T2 accede a q
12024: T2 devuelve
12024: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 4 segundos
Se hicieron 13234 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 4
Info: total context changes = 26873
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin -slice 1
Info: setting 1-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1012: lanzando T3
 1012: T3 solicita acceder
 3021: lanzando T1
 3021: T1 solicita compartir p
 3021: T3 accede a p
 3021: T4 accede a p
 4028: lanzando T2
 4028: T2 solicita acceder
 4028: T2 accede a p
 5044: T4 devuelve
 6109: T2 devuelve
 7027: T3 devuelve
 7027: T1 termina de compartir p
 9029: T1 solicita compartir q
11113: T2 solicita acceder
11113: T2 accede a q
12115: T2 devuelve
12115: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 8 segundos
Se hicieron 1402 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 4337
Info: Implicit context changes = 1095

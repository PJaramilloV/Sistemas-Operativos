Sistema operativo utilizado
Linux debian11mate 5.10.0-17-amd64 #1 SMP Debian 5.10.136-1 (2022-08-13) x86_64 GNU/Linux
==== run-san =============================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -c -fsanitize=address -fsanitize=undefined -DSANITIZE -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth-san.a
ar r libnth-san.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth-san.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -fsanitize=address -fsanitize=undefined -DSAN -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth-san.a -lm -lpthread -lrt -o test-compartir.nbin-san
Ejecute con: test-compartir.nbin-san ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin-san
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1393: lanzando T3
 1393: T3 solicita acceder
 3396: lanzando T1
 3396: T1 solicita compartir p
 3396: T4 accede a p
 3396: T3 accede a p
 4398: lanzando T2
 4398: T2 solicita acceder
 4398: T2 accede a p
 5402: T4 devuelve
 6404: T2 devuelve
 7398: T3 devuelve
 7398: T1 termina de compartir p
 9398: T1 solicita compartir q
11404: T2 solicita acceder
11404: T2 accede a q
12405: T2 devuelve
12405: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 4 segundos
Se hicieron 30101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 60529
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin-san -slice 1
Info: setting 1-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1006: lanzando T3
 1006: T3 solicita acceder
 3009: lanzando T1
 3009: T1 solicita compartir p
 3009: T3 accede a p
 3009: T4 accede a p
 4014: lanzando T2
 4014: T2 solicita acceder
 4014: T2 accede a p
 5010: T4 devuelve
 6014: T2 devuelve
 7016: T3 devuelve
 7017: T1 termina de compartir p
 9024: T1 solicita compartir q
11015: T2 solicita acceder
11016: T2 accede a q
12020: T2 devuelve
12020: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 4 segundos
Se hicieron 6182 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 13710
Info: Implicit context changes = 714
==== run-g ===============================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -c -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth-g.a
ar r libnth-g.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth-g.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth-g.a -lm -lpthread -lrt -o test-compartir.nbin-g
Ejecute con: test-compartir.nbin-g ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin-g
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1010: lanzando T3
 1010: T3 solicita acceder
 3013: lanzando T1
 3013: T1 solicita compartir p
 3013: T4 accede a p
 3013: T3 accede a p
 4145: lanzando T2
 4145: T2 solicita acceder
 4145: T2 accede a p
 5026: T4 devuelve
 6150: T2 devuelve
 7014: T3 devuelve
 7014: T1 termina de compartir p
 9014: T1 solicita compartir q
11153: T2 solicita acceder
11153: T2 accede a q
12158: T2 devuelve
12158: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 3 segundos
Se hicieron 30101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 60529
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin-g -ncores 4
Info: setting 4-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1071: lanzando T3
 1071: T3 solicita acceder
 3072: lanzando T1
 3073: T1 solicita compartir p
 3073: T4 accede a p
 3073: T3 accede a p
 4073: lanzando T2
 4073: T2 solicita acceder
 4073: T2 accede a p
 5630: T4 devuelve
 6076: T2 devuelve
 7106: T3 devuelve
 7106: T1 termina de compartir p
 9106: T1 solicita compartir q
11111: T2 solicita acceder
11111: T2 accede a q
12200: T2 devuelve
12200: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 2 segundos
Se hicieron 21548 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 4
Info: total context changes = 43471
Info: Implicit context changes = 0
==== run =================================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -O -c -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth.a
ar r libnth.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -O -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth.a -lm -lpthread -lrt -o test-compartir.nbin
Ejecute con: test-compartir.nbin ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1009: lanzando T3
 1010: T3 solicita acceder
 3019: lanzando T1
 3019: T1 solicita compartir p
 3019: T4 accede a p
 3019: T3 accede a p
 4028: lanzando T2
 4028: T2 solicita acceder
 4028: T2 accede a p
 5025: T4 devuelve
 6028: T2 devuelve
 7023: T3 devuelve
 7023: T1 termina de compartir p
 9506: T1 solicita compartir q
11034: T2 solicita acceder
11034: T2 accede a q
12041: T2 devuelve
12041: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 3 segundos
Se hicieron 30101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 60529
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin -ncores 4
Info: setting 4-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1070: lanzando T3
 1070: T3 solicita acceder
 3076: lanzando T1
 3077: T1 solicita compartir p
 3077: T4 accede a p
 3077: T3 accede a p
 4079: lanzando T2
 4079: T2 solicita acceder
 4079: T2 accede a p
 5087: T4 devuelve
 6080: T2 devuelve
 7081: T3 devuelve
 7081: T1 termina de compartir p
 9083: T1 solicita compartir q
11083: T2 solicita acceder
11083: T2 accede a q
12085: T2 devuelve
12086: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 2 segundos
Se hicieron 740 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 4
Info: total context changes = 1866
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin -slice 1
Info: setting 1-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1003: lanzando T3
 1003: T3 solicita acceder
 3007: lanzando T1
 3007: T1 solicita compartir p
 3007: T3 accede a p
 3007: T4 accede a p
 4010: lanzando T2
 4010: T2 solicita acceder
 4010: T2 accede a p
 5253: T4 devuelve
 6014: T2 devuelve
 7010: T3 devuelve
 7010: T1 termina de compartir p
 9012: T1 solicita compartir q
11015: T2 solicita acceder
11015: T2 accede a q
12016: T2 devuelve
12016: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 3 segundos
Se hicieron 1685 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 4443
Info: Implicit context changes = 628

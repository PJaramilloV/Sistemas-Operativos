Sistema operativo utilizado
Linux debian11mate 5.10.0-17-amd64 #1 SMP Debian 5.10.136-1 (2022-08-13) x86_64 GNU/Linux
==== run-san =============================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -c -fsanitize=address -fsanitize=undefined -DSANITIZE -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth-san.a
ar r libnth-san.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth-san.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -fsanitize=address -fsanitize=undefined -DSAN -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth-san.a -lm -lpthread -lrt -o test-compartir.nbin-san
Ejecute con: test-compartir.nbin-san ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin-san
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1006: lanzando T3
 1006: T3 solicita acceder
 3017: lanzando T1
 3017: T1 solicita compartir p
 3017: T4 accede a p
 3017: T3 accede a p
 4026: lanzando T2
 4026: T2 solicita acceder
 4026: T2 accede a p
 5019: T4 devuelve
 6029: T2 devuelve
 7026: T3 devuelve
 7026: T1 termina de compartir p
 9031: T1 solicita compartir q
11032: T2 solicita acceder
11032: T2 accede a q
12037: T2 devuelve
12037: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
todavia no seg fault
Test de esfuerzo exitoso en 7 segundos
Se hicieron 101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 328
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin-san -slice 1
Info: setting 1-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1005: lanzando T3
 1005: T3 solicita acceder
 3006: lanzando T1
 3007: T1 solicita compartir p
 3007: T3 accede a p
 3007: T4 accede a p
 4007: lanzando T2
 4008: T2 solicita acceder
 4008: T2 accede a p
 5020: T4 devuelve
 6014: T2 devuelve
 7016: T3 devuelve
 7016: T1 termina de compartir p
 9017: T1 solicita compartir q
11018: T2 solicita acceder
11018: T2 accede a q
12022: T2 devuelve
12022: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
todavia no seg fault
Test de esfuerzo exitoso en 14 segundos
Se hicieron 6901 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 19905
Info: Implicit context changes = 55
==== run-g ===============================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -c -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth-g.a
ar r libnth-g.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth-g.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -g -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth-g.a -lm -lpthread -lrt -o test-compartir.nbin-g
Ejecute con: test-compartir.nbin-g ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin-g
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1069: lanzando T3
 1069: T3 solicita acceder
 3071: lanzando T1
 3071: T1 solicita compartir p
 3071: T4 accede a p
 3071: T3 accede a p
 4079: lanzando T2
 4079: T2 solicita acceder
 4079: T2 accede a p
 5083: T4 devuelve
 6082: T2 devuelve
 7072: T3 devuelve
 7072: T1 termina de compartir p
 9089: T1 solicita compartir q
11084: T2 solicita acceder
11084: T2 accede a q
12096: T2 devuelve
12096: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
todavia no seg fault
Test de esfuerzo exitoso en 5 segundos
Se hicieron 101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 328
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin-g -ncores 4
Info: setting 4-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1010: lanzando T3
 1010: T3 solicita acceder
 3026: lanzando T1
 3026: T1 solicita compartir p
 3026: T4 accede a p
 3026: T3 accede a p
 4037: lanzando T2
 4037: T2 solicita acceder
 4037: T2 accede a p
 5034: T4 devuelve
 6037: T2 devuelve
 7029: T3 devuelve
 7030: T1 termina de compartir p
 9030: T1 solicita compartir q
11041: T2 solicita acceder
11041: T2 accede a q
12054: T2 devuelve
12054: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
todavia no seg fault
Test de esfuerzo exitoso en 5 segundos
Se hicieron 3606 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 4
Info: total context changes = 414
Info: Implicit context changes = 0
==== run =================================
NTHOBJ=nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -O -c -Wall -Werror -pedantic -std=c18 -Wno-unused-function -Wno-unused-variable -DNTHREADS  nthread.c nutil.c ntime.c pss.c sched-fcfs.c sched-rr.c ncompartir.c sched-pri-1core.c sched-fcfs-1core.c sem.c mutex-cond.c nmsgs.c nStack-amd64.s nsystem.c
rm -f libnth.a
ar r libnth.a nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
ranlib libnth.a
rm nthread.o nutil.o ntime.o pss.o sched-fcfs.o sched-rr.o ncompartir.o sched-pri-1core.o sched-fcfs-1core.o sem.o mutex-cond.o nmsgs.o nStack-amd64.o nsystem.o
gcc -O -DNTHREADS -Wall -Werror -pedantic -std=c18 -InKernel test-compartir.c none.c nKernel/libnth.a -lm -lpthread -lrt -o test-compartir.nbin
Ejecute con: test-compartir.nbin ... opciones ... (-h para help)
--------------------------------------------
./test-compartir.nbin
Info: setting single-core FCFS scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1007: lanzando T3
 1007: T3 solicita acceder
 3015: lanzando T1
 3015: T1 solicita compartir p
 3015: T4 accede a p
 3015: T3 accede a p
 4021: lanzando T2
 4021: T2 solicita acceder
 4021: T2 accede a p
 5020: T4 devuelve
 6023: T2 devuelve
 7029: T3 devuelve
 7029: T1 termina de compartir p
 9034: T1 solicita compartir q
11026: T2 solicita acceder
11026: T2 accede a q
12094: T2 devuelve
12094: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
todavia no seg fault
Test de esfuerzo exitoso en 5 segundos
Se hicieron 101 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 328
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin -ncores 4
Info: setting 4-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1000: lanzando T3
 1000: T3 solicita acceder
 3003: lanzando T1
 3003: T1 solicita compartir p
 3003: T3 accede a p
 3003: T4 accede a p
 4007: lanzando T2
 4007: T2 solicita acceder
 4007: T2 accede a p
 5004: T4 devuelve
 6019: T2 devuelve
 7023: T3 devuelve
 7024: T1 termina de compartir p
 9027: T1 solicita compartir q
11032: T2 solicita acceder
11032: T2 accede a q
12086: T2 devuelve
12087: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
todavia no seg fault
Test de esfuerzo exitoso en 5 segundos
Se hicieron 2135 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 4
Info: total context changes = 414
Info: Implicit context changes = 0
--------------------------------------------
./test-compartir.nbin -slice 1
Info: setting 1-core round robin scheduling
Primer test: se invoca 1 nAcceder despues de nCompartir
Primer test exitoso
2do. test: se invoca 1 nAcceder antes que nCompartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1010: lanzando T3
 1010: T3 solicita acceder
 3013: lanzando T1
 3013: T1 solicita compartir p
 3013: T3 accede a p
 3013: T4 accede a p
 4017: lanzando T2
 4017: T2 solicita acceder
 4017: T2 accede a p
 5087: T4 devuelve
 6041: T2 devuelve
 7017: T3 devuelve
 7017: T1 termina de compartir p
 9144: T1 solicita compartir q
11073: T2 solicita acceder
11074: T2 accede a q
12086: T2 devuelve
12086: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
todavia no seg fault
Test de esfuerzo exitoso en 11 segundos
Se hicieron 6464 llamadas a nCompartir

Felicitaciones: su tarea funciona correctamente
Info: Number of cores = 1
Info: total context changes = 16415
Info: Implicit context changes = 42
